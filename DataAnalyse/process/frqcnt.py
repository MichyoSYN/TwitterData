#!/usr/bin/env python
# Filename: frqcnt.py

__author__ = 'Echo ZHAN'

# This file concludes 
# two classes to partition a time period to lots of time window 
# and a function to count the tweets in a time window

class dateEnd(object):
	#this class is to store time
	#to initiate this class, you need to give a time string in the shape of "0000-00-00 00:00:00.000"
	#the function tTos can convert an object of this class to a time string
	
	def __init__(self, timestr):
		self.year = int(timestr[:4])
		self.mont = int(timestr[5:7])
		self.day = int(timestr[8:10])
		self.hour = int(timestr[11:13])
		self.mini = int(timestr[14:16])
		self.sec = int(timestr[17:19])
			
	def tTos(self):
		timestr = str(self.year)
		
		if self.mont < 10:
			timestr = timestr + '-0' + str(self.mont)
		else:
			timestr = timestr + '-' + str(self.mont)
			
		if self.day < 10:
			timestr = timestr + '-0' + str(self.day)
		else:
			timestr = timestr + '-' + str(self.day)
			
		if self.hour < 10:
			timestr = timestr + ' 0' + str(self.hour)
		else:
			timestr = timestr + ' ' + str(self.hour)
			
		if self.mini < 10:
			timestr = timestr + ':0' + str(self.mini)
		else:
			timestr = timestr + ':' + str(self.mini)
			
		if self.sec < 10:
			timestr = timestr + ':0' + str(self.sec)
		else:
			timestr = timestr + ':' + str(self.sec)
			
		timestr = timestr + '.000'
		return timestr

class Timestamp(dateEnd):
	#this class can help generate the beginning and the end of time windows
	#to initiate this class you need to give three object of class dateEnd(above)
	#the three objects stand for the beginning and the end of time period, and the interval of a time window
	#the function addt can add two object
	#the function cmpr can compare two time object
	#the function check can check if a time object is illegal(e.g. the value standing fot minite is larger than 60)
	#the function tmSlGen can generate a string list. Each string stands for a time point. In this way, we get the time windows we want
	
	def __init__(self, start, end, interval):
		self.year = start.year
		self.mont = start.mont
		self.day = start.day
		self.hour = start.hour
		self.mini = start.mini
		self.sec = start.sec
		self.dit = {1:31, 2:28, 3:31, 4:30, 5:31, 6:30, 7:31, 8:31, 9:30, 10:31, 11:30, 12:31}
		self.end = end
		self.interval = interval
		
	def addt(self):
		self.year += self.interval.year
		self.mont += self.interval.mont
		self.day += self.interval.day
		self.hour += self.interval.hour
		self.mini += self.interval.mini
		self.sec += self.interval.sec
		self.check()
			
	def cmpr(self, tim):
		#when selftime is smaller than tim return true
		if self.year > tim.year:
			return False
		elif self.year < tim.year:
			return True
		elif self.mont > tim.mont:
			return False
		elif self.mont < tim.mont:
			return True
		elif self.day > tim.day:
			return False
		elif self.day < tim.day:
			return True
		elif self.hour > tim.hour:
			return False
		elif self.hour < tim.hour:
			return True
		elif self.mini > tim.mini:
			return False
		elif self.mini < tim.mini:
			return True
		elif self.sec > tim.sec:
			return False
		elif self.sec < tim.sec:
			return True
		else:
			return None
		
	def check(self):
		#considering timewindow must be smaller than 1 month, there may be a bug if timewindow is larger than 1 month
		if self.sec >= 60:
			self.sec -= 60
			self.mini += 1
		if self.mini >= 60:
			self.mini -= 60
			self.hour += 1
		if self.hour >= 24:
			self.hour -= 24
			self.day += 1
		if self.day > self.dit[self.mont]:
			self.day -= self.dit[self.mont]
			self.mont += 1
		if self.mont > 12:
			self.mont -= 12
			self.year += 1
			
	def tmSlGen(self):
		tmSl = []
		while self.cmpr(self.end):
			timeStr = self.tTos()
			tmSl.append(timeStr)
			self.addt()
			
		timeStr = self.end.tTos()
		tmSl.append(timeStr)
		return tmSl

import sqlite3
import outputGen
import config

#this function is to calculate the quantity of tweets in each time window
#the time windows will be generated by the Timestamp class above
#this function will return two list, the first list is the quantity of tweets in each time window, and the second list is the time point strings
def twCount(starttime, endtime, tminterval, event):
	
	conn = sqlite3.connect(config.databasePath)
	cursor = conn.cursor()
	
	start = dateEnd(starttime)
	end = dateEnd(endtime)
	interval = dateEnd(tminterval)

	timeslt = Timestamp(start, end, interval)
	timIntv = timeslt.tmSlGen()

	length = len(timIntv)
	i = 0
	twcount = []
	while i<(length-1):
		front = timIntv[i]
		i += 1
		back = timIntv[i]
		targetf = 'datetime(\''+front+'\')'
		targetb = 'datetime(\''+back+'\')'
		target = 'select count(*) from(select * from DataAnalyse_twitter where event=\''+event+'\' AND datetime(pub_date)>'+targetf+' AND datetime(pub_date)<'+targetb+')'
		cursor.execute(target)
		value =  cursor.fetchall()
		twcount.append(value[0][0])
	
	cursor.close()
	conn.close()
	
	outputGen.WndOutput(twcount, timIntv, event)
	return twcount, timIntv

# End of frqcnt.py